(require ' ["./core.mjs" :as +])
(defn- def-property [js-class k impl] (when-not ((.. js-class -prototype -hasOwnProperty) k) (.defineProperty js/Object (.-prototype js-class) k {:get (fn [] (this-as this ((.bind impl this))))})))
(defn- def-method [js-class k impl] (aset (.-prototype js-class) k impl))
(defn- defs-for [js-class f] (f (fn [k impl] (def-property js-class k impl)) (fn [k impl] (def-method js-class k impl))))
(defs-for js/Number (fn [def-property def-method] (def-property "T" (fn [] (cljs.core/this-as $-181 +/NumT))) (doseq [k ["J" "P" "I"]] (def-property k (fn [] (cljs.core/this-as $-182 (.valueOf $-182)))))))
(defs-for js/Boolean (fn [def-property def-method] (def-property "T" (fn [] (cljs.core/this-as $-183 +/BoolT))) (doseq [k ["J" "P" "I"]] (def-property k (fn [] (cljs.core/this-as $-184 (.valueOf $-184)))))))
(defs-for js/String (fn [def-property def-method] (def-property "T" (fn [] (cljs.core/this-as $-185 +/StrT))) (doseq [k ["J" "P" "I"]] (def-property k (fn [] (cljs.core/this-as $-186 (.valueOf $-186)))))))
(defs-for js/Map (fn [def-property def-method] (def-property "T" (fn [] (cljs.core/this-as $-187 +/MapT))) (def-property "I" (fn [] (cljs.core/this-as $-188 (let [i (or (aget $-188 "i") (+/mk-inst-id))] (aset $-188 "i" i) i)))) (def-property "J" (fn [] (cljs.core/this-as $-189 (+/js-array-from $-189 [+/MapT] (fn [_anon%1_145] (.map _anon%1_145 +/json)))))) (def-property "P" (fn [] (cljs.core/this-as $-190 (let [res {}] (.forEach (+/js-array-from $-190) (fn [_anon%1_146] (let [k (aget _anon%1_146 0) pk (if (+/js-str? k) (+/str "\"" k "\"") k) pv (+/pretty (aget _anon%1_146 1))] (aset res pk pv)))) res))))))
(defs-for js/Array (fn [def-property def-method] (def-property "T" (fn [] (cljs.core/this-as $-191 (aget $-191 0)))) (def-property "I" (fn [] (cljs.core/this-as $-192 (let [i (or (aget $-192 "i") (+/mk-inst-id))] (aset $-192 "i" i) i)))) (def-property "J" (fn [] (cljs.core/this-as $-193 (.map $-193 +/json)))) (def-property "P" (fn [] (cljs.core/this-as $-194 (let [id (.-T $-194) res {}] (aset res "Type" (or (aget +/qt-store id) id)) (.forEach (.slice $-194 1) (fn [v ind] (let [pk (or (+/dig +/prop-store [id nil ind :idname]) (+/dig +/prop-store [id (aget $-194 1) ind :idname]) ind)] (if (+/is pk "+") (aset res "Type" (+/str (aget res "Type") "[" (+/dig +/variant-store [id (aget $-194 1)]) "]")) (aset res pk (+/pretty v)))))) res))))))
