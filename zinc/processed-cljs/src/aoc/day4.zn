(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def CardT 13))
(defn cardId [val-18] (let [^{:unname "id"} var-id-19 (aget val-18 1)] ^{:unname "id"} var-id-19))
(defn parseCard [line] (let [[idLabelStr numDataStr] (.split line ":") [_cardStr idStr] (.split (.trim idLabelStr) lib/rx_whitespace) id (lib/parseInt idStr) [winningNumStr myNumStr] (.split (.trim numDataStr) "|") toSet (fn [numStr] (as-> numStr $ (.split (.trim $) lib/rx_whitespace) (.map $ lib/parseInt) (+/apply +/Set $))) winning (toSet winningNumStr) my (toSet myNumStr)] [13 id winning my]))
(defn myWinCount [val-20] (let [^{:unname "winning"} var-winning-21 (aget val-20 2) ^{:unname "my"} var-my-22 (aget val-20 3)] (+/size (+/intersection ^{:unname "winning"} var-winning-21 ^{:unname "my"} var-my-22))))
(defn cardValue [card] (->> (myWinCount card) (+ -1) (js/Math.pow 2) js/Math.floor))
(defn parseCards [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_73] (not (+/is "" (.trim _anon%1_73))))) (+/fmap parseCard)))
(defn part1 [input] (->> (parseCards input) (+/fmap cardValue) (+/reduce (fn [_anon%1_74 _anon%2_75] (+ _anon%1_74 _anon%2_75)) 0)))
(defn scratchCardsWonByCard [card cardsById] (->> (+/Range (myWinCount card)) (+/fmap (fn [_anon%1_76] (scratchCardsWonById (+ (cardId card) 1 _anon%1_76) cardsById))) (+/reduce (fn [_anon%1_77 _anon%2_78] (+ _anon%1_77 _anon%2_78)) 1)))
(let [scratchCardsWonById-impl-18 (fn [id cardsById] (->> (+/at cardsById id) (+/fmap (fn [_anon%1_79] (scratchCardsWonByCard _anon%1_79 cardsById))) (+/or 0))) scratchCardsWonById-memo-20 (+/Map)] (defn scratchCardsWonById [& scratchCardsWonById-args-19] (let [scratchCardsWonById-mkey-17 (+/encode (+/fmap +/forcedKey (+/apply +/Vec scratchCardsWonById-args-19))) scratchCardsWonById-rtrn-16 (+/or- (fn [] (+/apply scratchCardsWonById-impl-18 scratchCardsWonById-args-19)) (+/at scratchCardsWonById-memo-20 scratchCardsWonById-mkey-17))] (+/put scratchCardsWonById-memo-20 scratchCardsWonById-mkey-17 scratchCardsWonById-rtrn-16) scratchCardsWonById-rtrn-16)))
(defn part2 [input] (let [cards (parseCards input) cardsById (+/keyBy cardId cards)] (->> (+/keys cardsById) (+/fmap (fn [_anon%1_80] (scratchCardsWonById _anon%1_80 cardsById))) (+/reduce (fn [_anon%1_81 _anon%2_82] (+ _anon%1_81 _anon%2_82)) 0))))
