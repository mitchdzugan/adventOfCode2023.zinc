(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 18 "CardT") (+/bury +/prop-store [18 nil] {0 {:idname "id", :fullname "%id", :ind 0}, 1 {:idname "winning", :fullname "%winning", :ind 1, :type [+/SetT +/NumT]}, 2 {:idname "my", :fullname "%my", :ind 2, :type [+/SetT +/NumT]}})) (def CardT 18))
(defn cardId [val-59] (let [^{:unname "id"} var-id-60 (aget val-59 1)] ^{:unname "id"} var-id-60))
(def rx_whitespace (js/RegExp. "\\s+"))
(defn parseCard [line] (let [[idLabelStr numDataStr] (.split line ":") [_cardStr idStr] (.split (.trim idLabelStr) rx_whitespace) id (js/parseInt idStr 10) [winningNumStr myNumStr] (.split (.trim numDataStr) "|") toSet (fn [numStr] (as-> numStr $ (.split (.trim $) rx_whitespace) (.map $ (fn [_anon%1_15] (js/parseInt _anon%1_15 10))) (+/apply +/Set $))) winning (toSet winningNumStr) my (toSet myNumStr)] [18 id winning my]))
(defn myWinCount [val-61] (let [^{:unname "winning"} var-winning-62 (aget val-61 2) ^{:unname "my"} var-my-63 (aget val-61 3)] (+/size (+/intersection ^{:unname "winning"} var-winning-62 ^{:unname "my"} var-my-63))))
(defn cardValue [card] (->> (myWinCount card) (+ -1) (js/Math.pow 2) js/Math.floor))
(defn parseCards [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_16] (not (+/is "" (.trim _anon%1_16))))) (+/fmap parseCard)))
(defn part1 [input] (->> (parseCards input) (+/fmap cardValue) (+/reduce (fn [_anon%1_17 _anon%2_18] (+ _anon%1_17 _anon%2_18)) 0)))
(defn scratchCardsWonByCard [card cardsById] (->> (+/Range (myWinCount card)) (+/fmap (fn [_anon%1_19] (scratchCardsWonById (+ (cardId card) 1 _anon%1_19) cardsById))) (+/reduce (fn [_anon%1_20 _anon%2_21] (+ _anon%1_20 _anon%2_21)) 1)))
(let [scratchCardsWonById-impl-17 (fn [id cardsById] (->> (+/at cardsById id) (+/fmap (fn [_anon%1_22] (scratchCardsWonByCard _anon%1_22 cardsById))) (+/or 0))) scratchCardsWonById-memo-19 (+/Map)] (defn scratchCardsWonById [& scratchCardsWonById-args-18] (let [scratchCardsWonById-mkey-16 (+/encode (+/fmap +/forcedKey (+/apply +/Vec scratchCardsWonById-args-18))) scratchCardsWonById-rtrn-15 (+/or- (fn [] (+/apply scratchCardsWonById-impl-17 scratchCardsWonById-args-18)) (+/at scratchCardsWonById-memo-19 scratchCardsWonById-mkey-16))] (+/put scratchCardsWonById-memo-19 scratchCardsWonById-mkey-16 scratchCardsWonById-rtrn-15) scratchCardsWonById-rtrn-15)))
(defn part2 [input] (let [cards (parseCards input) cardsById (+/keyBy cardId cards)] (->> (+/keys cardsById) (+/fmap (fn [_anon%1_23] (scratchCardsWonById _anon%1_23 cardsById))) (+/reduce (fn [_anon%1_24 _anon%2_25] (+ _anon%1_24 _anon%2_25)) 0))))
