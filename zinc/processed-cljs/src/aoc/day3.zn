(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 14 "SchemaNumberT") (+/bury +/prop-store [14 nil] {0 {:idname "value", :fullname "%value", :ind 0}, 1 {:idname "part-number?", :fullname "%part-number?", :ind 1}})) (def SchemaNumberT 14))
(defn SchemaNumber [value] [14 value false])
(defn value [val-46] (let [^{:unname "value"} var-value-47 (aget val-46 1)] ^{:unname "value"} var-value-47))
(defn part-number? [val-48] (let [^{:unname "part-number?"} var-part-number?-49 (aget val-48 2)] ^{:unname "part-number?"} var-part-number?-49))
(defn accept-part-number [schema-number] [14 (value schema-number) true])
(do (do (aset +/qt-store 15 "TokenT") (+/bury +/prop-store [15 1] {0 {:idname "+", :fullname "%+", :ind 0}, 1 {:idname "d", :fullname "%d", :ind 1}}) (+/bury +/prop-store [15 2] {0 {:idname "+", :fullname "%+", :ind 0}, 1 {:idname "s", :fullname "%s", :ind 1}}) (+/bury +/prop-store [15 3] {0 {:idname "+", :fullname "%+", :ind 0}}) (+/bury +/variant-store [15 1] "Digit") (+/bury +/variant-store [15 2] "Symbol") (+/bury +/variant-store [15 3] "Dot")) (def TokenT 15))
(defn Digit [d] [15 1 d])
(defn Symbol [s] [15 2 s])
(def Dot [15 3])
(defn classify [c] (if (+/is c ".") Dot (let [d (js/parseInt c 10)] (if (and (>= d 0) (< d 10)) (Digit d) (Symbol c)))))
(defn put-in [v2d i j v] (let [row (+/or (+/Vec) (+/at v2d i))] (+/put row j v)))
(defn process-grid [input handle-symbol-neighbors] (let [token-grid (->> (lib/strsplit input "\n") (+/fmap (fn [_anon%1_1] (+/fmap classify (lib/strsplit _anon%1_1 ""))))) schema-number-id-grid (+/fmap (fn [_anon%1_2] (+/fmap (fn [] +/None) _anon%1_2)) token-grid) schema-numbers (+/Vec) add-neighbor (fn [neighbors i j] (->> (+/put neighbors schema-number-id schema-number) (fn [schema-number]) ((fn [_anon%1_10 _anon%2_9] (+/bind _anon%2_9 _anon%1_10)) (+/at schema-numbers schema-number-id)) (fn [schema-number-id]) ((fn [_anon%1_8 _anon%2_7] (+/bind _anon%2_7 _anon%1_8)) mschema-number-id) (fn [mschema-number-id]) ((fn [_anon%1_6 _anon%2_5] (+/bind _anon%2_5 _anon%1_6)) (+/at row j)) (fn [row]) ((fn [_anon%1_4 _anon%2_3] (+/bind _anon%2_3 _anon%1_4)) (+/at schema-number-id-grid i)))) init-schema-number (fn [_anon%1_11] (when (> _anon%1_11 0) (+/put schema-numbers (+/size schema-numbers) (SchemaNumber _anon%1_11))))] (-> (fn [row i] (let [ending (-> (fn [acc val-50 j] (let [val-51 val-50 spec-52 {1 (fn [] (let [^{:unname "d"} var-d-53 (aget val-51 2)] (let [next (+ (* 10 acc) ^{:unname "d"} var-d-53)] (->> (+/Just (+/size schema-numbers)) (put-in schema-number-id-grid i j) (when (> next 0))) next))), 0 (fn [] (let [] (do (init-schema-number acc) 0)))}] ((or (aget spec-52 (aget val-51 1)) (aget spec-52 0))))) (+/reduce 0 row))] (init-schema-number ending))) (+/each token-grid)) (-> (fn [row i] (-> (fn [val-54 j] (let [val-55 val-54 spec-56 {2 (fn [] (let [] (let [neighbors (+/Map)] (add-neighbor neighbors (+/dec i) (+/dec j)) (add-neighbor neighbors (+/dec i) (+/id j)) (add-neighbor neighbors (+/dec i) (+/inc j)) (add-neighbor neighbors (+/id i) (+/dec j)) (add-neighbor neighbors (+/id i) (+/inc j)) (add-neighbor neighbors (+/inc i) (+/dec j)) (add-neighbor neighbors (+/inc i) (+/id j)) (add-neighbor neighbors (+/inc i) (+/inc j)) (handle-symbol-neighbors neighbors schema-numbers)))), 0 (fn [] (let [] nil))}] ((or (aget spec-56 (aget val-55 1)) (aget spec-56 0))))) (+/each row))) (+/each token-grid)) schema-numbers))
(defn part1 [input] (->> (->> (+/each (fn [_anon%1_13 _anon%2_12] (+/put schema-nums _anon%2_12 (accept-part-number _anon%1_13))) neighbors) (fn [neighbors schema-nums]) (process-grid input)) (+/filter part-number?) (+/fmap value) (+/reduce (fn [_anon%1_14 _anon%2_15] (+ _anon%1_14 _anon%2_15)) 0)))
(defn part2 [input] (let [sum-ref (aref 0)] (->> (+/reduce (fn [_anon%1_16 _anon%2_17] (* _anon%1_16 (value _anon%2_17))) 1 neighbors) (+ (aget sum-ref "r")) (a= sum-ref) (when (+/is 2 (+/size neighbors))) (fn [neighbors]) (process-grid input)) (aget sum-ref "r")))
