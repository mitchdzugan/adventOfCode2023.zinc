(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 25 "SchemaNumberT") (+/bury +/prop-store [25 nil] {0 {:idname "value", :fullname "%value", :ind 0}, 1 {:idname "part-number?", :fullname "%part-number?", :ind 1}})) (def SchemaNumberT 25))
(defn SchemaNumber [value] [25 value false])
(defn value [val-96] (let [^{:unname "value"} var-value-97 (aget val-96 1)] ^{:unname "value"} var-value-97))
(defn part-number? [val-98] (let [^{:unname "part-number?"} var-part-number?-99 (aget val-98 2)] ^{:unname "part-number?"} var-part-number?-99))
(defn accept-part-number [schema-number] [25 (value schema-number) true])
(do (do (aset +/qt-store 26 "TokenT") (+/bury +/prop-store [26 1] {0 {:idname "+", :fullname "%+", :ind 0}, 1 {:idname "d", :fullname "%d", :ind 1}}) (+/bury +/prop-store [26 2] {0 {:idname "+", :fullname "%+", :ind 0}, 1 {:idname "s", :fullname "%s", :ind 1}}) (+/bury +/prop-store [26 3] {0 {:idname "+", :fullname "%+", :ind 0}}) (+/bury +/variant-store [26 1] "Digit") (+/bury +/variant-store [26 2] "Symbol") (+/bury +/variant-store [26 3] "Dot")) (def TokenT 26))
(defn Digit [d] [26 1 d])
(defn Symbol [s] [26 2 s])
(def Dot [26 3])
(defn classify [c] (->> (if (and (>= d 0) (< d 10)) (Digit d) (Symbol c)) (let [d (lib/parseInt c)]) (if (+/is c ".") Dot)))
(defn put-in [v2d i j v] (let [row (+/or (+/Vec) (+/at v2d i))] (+/put row j v)))
(defn process-grid [input handle-symbol-neighbors] (let [token-grid (->> (lib/strsplit input "\n") (+/fmap (fn [_anon%1_70] (+/fmap classify (lib/strsplit _anon%1_70 ""))))) schema-number-id-grid (+/fmap (fn [_anon%1_71] (+/fmap (fn [] +/None) _anon%1_71)) token-grid) schema-numbers (+/Vec) init-schema-number (fn [_anon%1_72] (->> (SchemaNumber _anon%1_72) (+/put schema-numbers (+/size schema-numbers)) (when (> _anon%1_72 0)))) add-neighbor (fn [neighbors i j] (->> (+/put neighbors schema-number-id schema-number) (fn [schema-number]) ((fn [_anon%1_80 _anon%2_79] (+/bind _anon%2_79 _anon%1_80)) (+/at schema-numbers schema-number-id)) (fn [schema-number-id]) ((fn [_anon%1_78 _anon%2_77] (+/bind _anon%2_77 _anon%1_78)) mschema-number-id) (fn [mschema-number-id]) ((fn [_anon%1_76 _anon%2_75] (+/bind _anon%2_75 _anon%1_76)) (+/at row j)) (fn [row]) ((fn [_anon%1_74 _anon%2_73] (+/bind _anon%2_73 _anon%1_74)) (+/at schema-number-id-grid i))))] (-> (fn [row i] (-> (fn [acc val-100 j] (let [val-101 val-100 spec-102 {1 (fn [] (let [^{:unname "d"} var-d-103 (aget val-101 2)] (let [next (+ (* 10 acc) ^{:unname "d"} var-d-103)] (->> (+/Just (+/size schema-numbers)) (put-in schema-number-id-grid i j) (when (> next 0))) next))), 0 (fn [] (let [] (do (init-schema-number acc) 0)))}] ((or (aget spec-102 (aget val-101 1)) (aget spec-102 0))))) (+/reduce 0 row) (init-schema-number))) (+/each token-grid)) (-> (fn [row i] (-> (fn [val-104 j] (let [val-105 val-104 spec-106 {2 (fn [] (let [] (let [neighbors (+/Map)] (add-neighbor neighbors (+/dec i) (+/dec j)) (add-neighbor neighbors (+/dec i) (+/id j)) (add-neighbor neighbors (+/dec i) (+/inc j)) (add-neighbor neighbors (+/id i) (+/dec j)) (add-neighbor neighbors (+/id i) (+/inc j)) (add-neighbor neighbors (+/inc i) (+/dec j)) (add-neighbor neighbors (+/inc i) (+/id j)) (add-neighbor neighbors (+/inc i) (+/inc j)) (handle-symbol-neighbors neighbors schema-numbers)))), 0 (fn [] (let []))}] ((or (aget spec-106 (aget val-105 1)) (aget spec-106 0))))) (+/each row))) (+/each token-grid)) schema-numbers))
(defn part1 [input] (->> (->> (+/each (fn [_anon%1_82 _anon%2_81] (+/put schema-nums _anon%2_81 (accept-part-number _anon%1_82))) neighbors) (fn [neighbors schema-nums]) (process-grid input)) (+/filter part-number?) (+/fmap value) (+/reduce (fn [_anon%1_83 _anon%2_84] (+ _anon%1_83 _anon%2_84)) 0)))
(defn part2 [input] (let [sum-ref (aref 0)] (->> (+/reduce (fn [_anon%1_85 _anon%2_86] (* _anon%1_85 (value _anon%2_86))) 1 neighbors) (+ (aget sum-ref "r")) (a= sum-ref) (when (+/is 2 (+/size neighbors))) (fn [neighbors]) (process-grid input)) (aget sum-ref "r")))
