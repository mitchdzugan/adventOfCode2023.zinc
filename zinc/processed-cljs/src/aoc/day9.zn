(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(defn zeros? [history] (+/every? (fn [_anon%1_3] (+/is 0 _anon%1_3)) history))
(defn next-value [history] (->> (let [next (+/Vec)] (+/push seqs next) (loop [ind 1] (when (< ind (+/size curr)) (+/push next (- (+/at! curr ind) (+/at! curr (- ind 1)))) (recur (+ ind 1)))) (recur (+ depth 1))) (if (zeros? curr) (do (+/push curr 0) (loop [depth depth] (if (<= depth 0) (+/last! history) (let [curr (+/at! seqs depth) prev (+/at! seqs (- depth 1))] (+/push prev (+ (+/last! prev) (+/last! curr))) (recur (- depth 1))))))) (let [curr (+/at! seqs depth)]) (loop [depth 0]) (let [seqs (+/Vec history)])))
(defn process [input reverse?] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_4] (not (+/is "" (.trim _anon%1_4))))) (+/fmap (fn [_anon%1_5] (lib/strsplit (.trim _anon%1_5) lib/rx_whitespace))) (+/fmap (fn [_anon%1_6] (+/fmap lib/parseInt _anon%1_6))) (+/fmap (if reverse? +/reverse +/id)) (+/fmap next-value) (+/reduce (fn [_anon%1_7 _anon%2_8] (+ _anon%1_7 _anon%2_8)) 0)))
(defn part1 [input] (process input false))
(defn part2 [input] (process input true))
