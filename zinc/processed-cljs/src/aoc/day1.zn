(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(def IGNORE_LEADING_0 false)
(def digitStrs (+/Map [["one" 1] ["two" 2] ["three" 3] ["four" 4] ["five" 5] ["six" 6] ["seven" 7] ["eight" 8] ["nine" 9] ["ten" 10]]))
(def digitStrLengths ((fn [] (let [seenLengths (+/Map)] (+/each (fn [_anon%1_16 _anon%2_15] (+/put seenLengths (.-length _anon%2_15) true)) digitStrs) (+/sort (+/keys seenLengths))))))
(defn getDigit [src index useDigitSrs exclude0] (let [digit (js/parseInt (.substr src index 1) 10)] (if (and (< digit 10) (>= digit (if exclude0 1 0))) (+/Just digit) (loop [result +/None strLenIndex 0] (if (or (not useDigitSrs) (not (+/empty? result)) (> strLenIndex (+/size digitStrLengths))) result (let [strLen (+/or 0 (+/at digitStrLengths strLenIndex)) substr (.substr src index strLen)] (recur (+/at digitStrs substr) (+ strLenIndex 1))))))))
(do (do (aset +/qt-store 17 "OriginT") (+/bury +/prop-store [17 1] {0 {:idname "+", :fullname "%+", :ind 0}}) (+/bury +/prop-store [17 2] {0 {:idname "+", :fullname "%+", :ind 0}}) (+/bury +/variant-store [17 1] "Front") (+/bury +/variant-store [17 2] "Back")) (def OriginT 17))
(def Front [17 1])
(def Back [17 2])
(defn firstDigit [src origin useDigitSrs] (let [start (let [val-16 origin spec-17 {1 (fn [] (let [] 0)), 2 (fn [] (let [] (- (.-length src) 1)))}] ((or (aget spec-17 (aget val-16 1)) (aget spec-17 0)))) delta (let [val-18 origin spec-19 {1 (fn [] (let [] 1)), 2 (fn [] (let [] -1))}] ((or (aget spec-19 (aget val-18 1)) (aget spec-19 0)))) exclude0 (let [val-20 origin spec-21 {1 (fn [] (let [] IGNORE_LEADING_0)), 2 (fn [] (let [] false))}] ((or (aget spec-21 (aget val-20 1)) (aget spec-21 0))))] (loop [result +/None index start] (if (or (not (+/empty? result)) (>= index (.-length src)) (< index 0)) result (recur (getDigit src index useDigitSrs exclude0) (+ index delta))))))
(defn getCalibrationValue [src useDigitSrs] (->> (+/Just (+ (* 10 dTens) dOnes)) (fn [dOnes]) ((fn [_anon%1_20 _anon%2_19] (+/bind _anon%2_19 _anon%1_20)) (firstDigit src Back useDigitSrs)) (fn [dTens]) ((fn [_anon%1_18 _anon%2_17] (+/bind _anon%2_17 _anon%1_18)) (firstDigit src Front useDigitSrs))))
(defn getCalibrationSum [input useDigitSrs] (->> (lib/strsplit input "\n") (+/fmap (fn [_anon%1_21] (getCalibrationValue _anon%1_21 useDigitSrs))) (+/reduce (fn [_anon%1_22 _anon%2_23] (+ _anon%1_22 (+/or 0 _anon%2_23))) 0)))
(defn part1 [input] (getCalibrationSum input false))
(defn part2 [input] (getCalibrationSum input true))
(defn solve [] (let [input (lib/getInput 1)] (lib/Solution (part1 input) (part2 input))))
