(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(def IGNORE_LEADING_0 false)
(def digitStrs (+/Map [["one" 1] ["two" 2] ["three" 3] ["four" 4] ["five" 5] ["six" 6] ["seven" 7] ["eight" 8] ["nine" 9]]))
(def digitStrLengths ((fn [] (let [seenLengths (+/Map)] (+/each (fn [_anon%1_61 _anon%2_60] (+/put seenLengths (.-length _anon%2_60) true)) digitStrs) (+/sort (+/keys seenLengths))))))
(defn getDigit [src index useDigitStrs exclude0] (let [digit (lib/parseInt (.substr src index 1))] (if (and (< digit 10) (>= digit (if exclude0 1 0))) (+/Just digit) (loop [result +/None strLenIndex 0] (if (or (not useDigitStrs) (not (+/empty? result)) (> strLenIndex (+/size digitStrLengths))) result (let [strLen (+/or 0 (+/at digitStrLengths strLenIndex)) substr (.substr src index strLen)] (recur (+/at digitStrs substr) (+ strLenIndex 1))))))))
(do nil (def OriginT 13))
(def Front [13 1])
(def Back [13 2])
(defn firstDigit [src origin useDigitStrs] (let [start (let [val-18 origin spec-19 {1 (fn [] (let [] 0)), 2 (fn [] (let [] (- (.-length src) 1)))}] ((or (aget spec-19 (aget val-18 1)) (aget spec-19 0)))) delta (let [val-20 origin spec-21 {1 (fn [] (let [] 1)), 2 (fn [] (let [] -1))}] ((or (aget spec-21 (aget val-20 1)) (aget spec-21 0)))) exclude0 (let [val-22 origin spec-23 {1 (fn [] (let [] IGNORE_LEADING_0)), 2 (fn [] (let [] false))}] ((or (aget spec-23 (aget val-22 1)) (aget spec-23 0))))] (loop [result +/None index start] (if (or (not (+/empty? result)) (>= index (.-length src)) (< index 0)) result (recur (getDigit src index useDigitStrs exclude0) (+ index delta))))))
(defn getCalibrationValue [src useDigitStrs] (->> (+/Just (+ (* 10 dTens) dOnes)) (fn [dOnes]) ((fn [_anon%1_65 _anon%2_64] (+/bind _anon%2_64 _anon%1_65)) (firstDigit src Back useDigitStrs)) (fn [dTens]) ((fn [_anon%1_63 _anon%2_62] (+/bind _anon%2_62 _anon%1_63)) (firstDigit src Front useDigitStrs))))
(defn getCalibrationSum [input useDigitStrs] (->> (lib/strsplit input "\n") (+/fmap (fn [_anon%1_66] (getCalibrationValue _anon%1_66 useDigitStrs))) (+/reduce (fn [_anon%1_67 _anon%2_68] (+ _anon%1_67 (+/or 0 _anon%2_68))) 0)))
(defn part1 [input] (getCalibrationSum input false))
(defn part2 [input] (getCalibrationSum input true))
