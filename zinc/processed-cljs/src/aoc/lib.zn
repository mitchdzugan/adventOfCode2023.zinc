(require ' ["path" :as path])
(require ' ["fs$default" :as fs])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 16 "SolutionT") (+/bury +/prop-store [16 nil] {0 {:idname "part1", :fullname "%part1", :ind 0}, 1 {:idname "part2", :fullname "%part2", :ind 1}})) (def SolutionT 16))
(defn Solution [part1 part2] [16 part1 part2])
(defn part1 [val-22] (let [^{:unname "part1"} var-part1-23 (aget val-22 1)] ^{:unname "part1"} var-part1-23))
(defn part2 [val-24] (let [^{:unname "part2"} var-part2-25 (aget val-24 2)] ^{:unname "part2"} var-part2-25))
(defn strsplit [src split] (+/apply +/Vec (.split src split)))
(defn getInput [n] (let [basename (+/str "day" n) filename (path/join js/__dirname ".." "resources" "input" basename)] (fs/readFileSync filename "utf8")))
