(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def RaceT 29))
(defn Race [time record] [29 time record])
(defn count-possibilities [val-116] (let [^{:unname "time"} var-time-117 (aget val-116 1) ^{:unname "record"} var-record-118 (aget val-116 2)] (let [qdrtc_root (/ (js/Math.sqrt (- (* ^{:unname "time"} var-time-117 ^{:unname "time"} var-time-117) (* 4 ^{:unname "record"} var-record-118))) 2) qdrtc_b_2a (/ ^{:unname "time"} var-time-117 2) bound_h (+/floor (+ qdrtc_b_2a qdrtc_root)) bound_l (+/floor (- qdrtc_b_2a qdrtc_root))] (- bound_h bound_l))))
(defn part1 [] (->> (+/Vec (Race 52 426) (Race 94 1374) (Race 75 1279) (Race 94 1216)) (+/fmap count-possibilities) (+/reduce (fn [_anon%1_15 _anon%2_16] (* _anon%1_15 _anon%2_16)) 1)))
(defn part2 [] (let [time 52947594 record 426137412791216] (count-possibilities (Race time record))))
