(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def CubeNumsT 14))
(defn CubeNums [red green blue] [14 red green blue])
(do nil (def GameT 15))
(defn cubes-power [val-24] (let [^{:unname "red"} var-red-25 (aget val-24 1) ^{:unname "green"} var-green-26 (aget val-24 2) ^{:unname "blue"} var-blue-27 (aget val-24 3)] (* ^{:unname "red"} var-red-25 ^{:unname "green"} var-green-26 ^{:unname "blue"} var-blue-27)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (lib/parseInt colorValStr)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_52] (addColorValFromColorStr colorVals _anon%1_52)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (lib/parseInt idValStr) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [15 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-28] (let [^{:unname "red"} var-red-29 (aget val-28 1) ^{:unname "green"} var-green-30 (aget val-28 2) ^{:unname "blue"} var-blue-31 (aget val-28 3)] (let [^{:unname "red"} var-red-32 (aget all-cubes 1) ^{:unname "green"} var-green-33 (aget all-cubes 2) ^{:unname "blue"} var-blue-34 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-29 ^{:unname "red"} var-red-32) (<= ^{:unname "green"} var-green-30 ^{:unname "green"} var-green-33) (<= ^{:unname "blue"} var-blue-31 ^{:unname "blue"} var-blue-34)))))
(defn valid-game? [val-35] (let [^{:unname "rounds"} var-rounds-36 (aget val-35 2)] (+/reduce (fn [_anon%1_53 _anon%2_54] (and _anon%1_53 (valid-round? _anon%2_54))) true ^{:unname "rounds"} var-rounds-36)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_55] (not (+/is "" (.trim _anon%1_55))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-37] (let [^{:unname "id"} var-id-38 (aget val-37 1)] ^{:unname "id"} var-id-38))) (+/reduce (fn [_anon%1_56 _anon%2_57] (+ _anon%1_56 _anon%2_57)) 0)))
(defn update-min-cubes [acc val-39] (let [^{:unname "red"} var-red-40 (aget val-39 1) ^{:unname "green"} var-green-41 (aget val-39 2) ^{:unname "blue"} var-blue-42 (aget val-39 3)] (let [^{:unname "red"} var-red-43 (aget acc 1) ^{:unname "green"} var-green-44 (aget acc 2) ^{:unname "blue"} var-blue-45 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-43 ^{:unname "red"} var-red-40) green (.max js/Math ^{:unname "green"} var-green-44 ^{:unname "green"} var-green-41) blue (.max js/Math ^{:unname "blue"} var-blue-45 ^{:unname "blue"} var-blue-42)] (CubeNums red green blue)))))
(defn min-cubes [val-46] (let [^{:unname "rounds"} var-rounds-47 (aget val-46 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-47)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_58 _anon%2_59] (+ _anon%1_58 _anon%2_59)) 0)))
