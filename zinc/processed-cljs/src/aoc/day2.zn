(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def CubeNumsT 30))
(defn CubeNums [red green blue] [30 red green blue])
(do nil (def GameT 31))
(defn cubes-power [val-119] (let [^{:unname "red"} var-red-120 (aget val-119 1) ^{:unname "green"} var-green-121 (aget val-119 2) ^{:unname "blue"} var-blue-122 (aget val-119 3)] (* ^{:unname "red"} var-red-120 ^{:unname "green"} var-green-121 ^{:unname "blue"} var-blue-122)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (lib/parseInt colorValStr)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_76] (addColorValFromColorStr colorVals _anon%1_76)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (lib/parseInt idValStr) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [31 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-123] (let [^{:unname "red"} var-red-124 (aget val-123 1) ^{:unname "green"} var-green-125 (aget val-123 2) ^{:unname "blue"} var-blue-126 (aget val-123 3)] (let [^{:unname "red"} var-red-127 (aget all-cubes 1) ^{:unname "green"} var-green-128 (aget all-cubes 2) ^{:unname "blue"} var-blue-129 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-124 ^{:unname "red"} var-red-127) (<= ^{:unname "green"} var-green-125 ^{:unname "green"} var-green-128) (<= ^{:unname "blue"} var-blue-126 ^{:unname "blue"} var-blue-129)))))
(defn valid-game? [val-130] (let [^{:unname "rounds"} var-rounds-131 (aget val-130 2)] (+/reduce (fn [_anon%1_77 _anon%2_78] (and _anon%1_77 (valid-round? _anon%2_78))) true ^{:unname "rounds"} var-rounds-131)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_79] (not (+/is "" (.trim _anon%1_79))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-132] (let [^{:unname "id"} var-id-133 (aget val-132 1)] ^{:unname "id"} var-id-133))) (+/reduce (fn [_anon%1_80 _anon%2_81] (+ _anon%1_80 _anon%2_81)) 0)))
(defn update-min-cubes [acc val-134] (let [^{:unname "red"} var-red-135 (aget val-134 1) ^{:unname "green"} var-green-136 (aget val-134 2) ^{:unname "blue"} var-blue-137 (aget val-134 3)] (let [^{:unname "red"} var-red-138 (aget acc 1) ^{:unname "green"} var-green-139 (aget acc 2) ^{:unname "blue"} var-blue-140 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-138 ^{:unname "red"} var-red-135) green (.max js/Math ^{:unname "green"} var-green-139 ^{:unname "green"} var-green-136) blue (.max js/Math ^{:unname "blue"} var-blue-140 ^{:unname "blue"} var-blue-137)] (CubeNums red green blue)))))
(defn min-cubes [val-141] (let [^{:unname "rounds"} var-rounds-142 (aget val-141 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-142)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_82 _anon%2_83] (+ _anon%1_82 _anon%2_83)) 0)))
