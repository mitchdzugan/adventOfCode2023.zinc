(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def CubeNumsT 30))
(defn CubeNums [red green blue] [30 red green blue])
(do nil (def GameT 31))
(defn cubes-power [val-160] (let [^{:unname "red"} var-red-161 (aget val-160 1) ^{:unname "green"} var-green-162 (aget val-160 2) ^{:unname "blue"} var-blue-163 (aget val-160 3)] (* ^{:unname "red"} var-red-161 ^{:unname "green"} var-green-162 ^{:unname "blue"} var-blue-163)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (lib/parseInt colorValStr)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_83] (addColorValFromColorStr colorVals _anon%1_83)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (lib/parseInt idValStr) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [31 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-164] (let [^{:unname "red"} var-red-165 (aget val-164 1) ^{:unname "green"} var-green-166 (aget val-164 2) ^{:unname "blue"} var-blue-167 (aget val-164 3)] (let [^{:unname "red"} var-red-168 (aget all-cubes 1) ^{:unname "green"} var-green-169 (aget all-cubes 2) ^{:unname "blue"} var-blue-170 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-165 ^{:unname "red"} var-red-168) (<= ^{:unname "green"} var-green-166 ^{:unname "green"} var-green-169) (<= ^{:unname "blue"} var-blue-167 ^{:unname "blue"} var-blue-170)))))
(defn valid-game? [val-171] (let [^{:unname "rounds"} var-rounds-172 (aget val-171 2)] (+/reduce (fn [_anon%1_84 _anon%2_85] (and _anon%1_84 (valid-round? _anon%2_85))) true ^{:unname "rounds"} var-rounds-172)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_86] (not (+/is "" (.trim _anon%1_86))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-173] (let [^{:unname "id"} var-id-174 (aget val-173 1)] ^{:unname "id"} var-id-174))) (+/reduce (fn [_anon%1_87 _anon%2_88] (+ _anon%1_87 _anon%2_88)) 0)))
(defn update-min-cubes [acc val-175] (let [^{:unname "red"} var-red-176 (aget val-175 1) ^{:unname "green"} var-green-177 (aget val-175 2) ^{:unname "blue"} var-blue-178 (aget val-175 3)] (let [^{:unname "red"} var-red-179 (aget acc 1) ^{:unname "green"} var-green-180 (aget acc 2) ^{:unname "blue"} var-blue-181 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-179 ^{:unname "red"} var-red-176) green (.max js/Math ^{:unname "green"} var-green-180 ^{:unname "green"} var-green-177) blue (.max js/Math ^{:unname "blue"} var-blue-181 ^{:unname "blue"} var-blue-178)] (CubeNums red green blue)))))
(defn min-cubes [val-182] (let [^{:unname "rounds"} var-rounds-183 (aget val-182 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-183)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_89 _anon%2_90] (+ _anon%1_89 _anon%2_90)) 0)))
