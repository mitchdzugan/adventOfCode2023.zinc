(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 12 "CubeNumsT") (+/bury +/prop-store [12 nil] {0 {:idname "red", :fullname "%red", :ind 0, :type +/NumT}, 1 {:idname "green", :fullname "%green", :ind 1, :type +/NumT}, 2 {:idname "blue", :fullname "%blue", :ind 2, :type +/NumT}})) (def CubeNumsT 12))
(defn CubeNums [red green blue] [12 red green blue])
(do (do (aset +/qt-store 13 "GameT") (+/bury +/prop-store [13 nil] {0 {:idname "id", :fullname "%id", :ind 0}, 1 {:idname "rounds", :fullname "%rounds", :ind 1, :type [+/VecT CubeNumsT]}})) (def GameT 13))
(defn cubes-power [val-22] (let [^{:unname "red"} var-red-23 (aget val-22 1) ^{:unname "green"} var-green-24 (aget val-22 2) ^{:unname "blue"} var-blue-25 (aget val-22 3)] (* ^{:unname "red"} var-red-23 ^{:unname "green"} var-green-24 ^{:unname "blue"} var-blue-25)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (js/parseInt colorValStr 10)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_33] (addColorValFromColorStr colorVals _anon%1_33)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (js/parseInt idValStr 10) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [13 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-26] (let [^{:unname "red"} var-red-27 (aget val-26 1) ^{:unname "green"} var-green-28 (aget val-26 2) ^{:unname "blue"} var-blue-29 (aget val-26 3)] (let [^{:unname "red"} var-red-30 (aget all-cubes 1) ^{:unname "green"} var-green-31 (aget all-cubes 2) ^{:unname "blue"} var-blue-32 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-27 ^{:unname "red"} var-red-30) (<= ^{:unname "green"} var-green-28 ^{:unname "green"} var-green-31) (<= ^{:unname "blue"} var-blue-29 ^{:unname "blue"} var-blue-32)))))
(defn valid-game? [val-33] (let [^{:unname "rounds"} var-rounds-34 (aget val-33 2)] (+/reduce (fn [_anon%1_34 _anon%2_35] (and _anon%1_34 (valid-round? _anon%2_35))) true ^{:unname "rounds"} var-rounds-34)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_36] (not (+/is "" (.trim _anon%1_36))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-35] (let [^{:unname "id"} var-id-36 (aget val-35 1)] ^{:unname "id"} var-id-36))) (+/reduce (fn [_anon%1_37 _anon%2_38] (+ _anon%1_37 _anon%2_38)) 0)))
(defn update-min-cubes [acc val-37] (let [^{:unname "red"} var-red-38 (aget val-37 1) ^{:unname "green"} var-green-39 (aget val-37 2) ^{:unname "blue"} var-blue-40 (aget val-37 3)] (let [^{:unname "red"} var-red-41 (aget acc 1) ^{:unname "green"} var-green-42 (aget acc 2) ^{:unname "blue"} var-blue-43 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-41 ^{:unname "red"} var-red-38) green (.max js/Math ^{:unname "green"} var-green-42 ^{:unname "green"} var-green-39) blue (.max js/Math ^{:unname "blue"} var-blue-43 ^{:unname "blue"} var-blue-40)] (CubeNums red green blue)))))
(defn min-cubes [val-44] (let [^{:unname "rounds"} var-rounds-45 (aget val-44 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-45)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_39 _anon%2_40] (+ _anon%1_39 _anon%2_40)) 0)))
