(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do (do (aset +/qt-store 30 "CubeNumsT") (+/bury +/prop-store [30 nil] {0 {:idname "red", :fullname "%red", :ind 0, :type +/NumT}, 1 {:idname "green", :fullname "%green", :ind 1, :type +/NumT}, 2 {:idname "blue", :fullname "%blue", :ind 2, :type +/NumT}})) (def CubeNumsT 30))
(defn CubeNums [red green blue] [30 red green blue])
(do (do (aset +/qt-store 31 "GameT") (+/bury +/prop-store [31 nil] {0 {:idname "id", :fullname "%id", :ind 0}, 1 {:idname "rounds", :fullname "%rounds", :ind 1, :type [+/VecT CubeNumsT]}})) (def GameT 31))
(defn cubes-power [val-164] (let [^{:unname "red"} var-red-165 (aget val-164 1) ^{:unname "green"} var-green-166 (aget val-164 2) ^{:unname "blue"} var-blue-167 (aget val-164 3)] (* ^{:unname "red"} var-red-165 ^{:unname "green"} var-green-166 ^{:unname "blue"} var-blue-167)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (lib/parseInt colorValStr)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_18] (addColorValFromColorStr colorVals _anon%1_18)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (lib/parseInt idValStr) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [31 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-168] (let [^{:unname "red"} var-red-169 (aget val-168 1) ^{:unname "green"} var-green-170 (aget val-168 2) ^{:unname "blue"} var-blue-171 (aget val-168 3)] (let [^{:unname "red"} var-red-172 (aget all-cubes 1) ^{:unname "green"} var-green-173 (aget all-cubes 2) ^{:unname "blue"} var-blue-174 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-169 ^{:unname "red"} var-red-172) (<= ^{:unname "green"} var-green-170 ^{:unname "green"} var-green-173) (<= ^{:unname "blue"} var-blue-171 ^{:unname "blue"} var-blue-174)))))
(defn valid-game? [val-175] (let [^{:unname "rounds"} var-rounds-176 (aget val-175 2)] (+/reduce (fn [_anon%1_19 _anon%2_20] (and _anon%1_19 (valid-round? _anon%2_20))) true ^{:unname "rounds"} var-rounds-176)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_21] (not (+/is "" (.trim _anon%1_21))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-177] (let [^{:unname "id"} var-id-178 (aget val-177 1)] ^{:unname "id"} var-id-178))) (+/reduce (fn [_anon%1_22 _anon%2_23] (+ _anon%1_22 _anon%2_23)) 0)))
(defn update-min-cubes [acc val-179] (let [^{:unname "red"} var-red-180 (aget val-179 1) ^{:unname "green"} var-green-181 (aget val-179 2) ^{:unname "blue"} var-blue-182 (aget val-179 3)] (let [^{:unname "red"} var-red-183 (aget acc 1) ^{:unname "green"} var-green-184 (aget acc 2) ^{:unname "blue"} var-blue-185 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-183 ^{:unname "red"} var-red-180) green (.max js/Math ^{:unname "green"} var-green-184 ^{:unname "green"} var-green-181) blue (.max js/Math ^{:unname "blue"} var-blue-185 ^{:unname "blue"} var-blue-182)] (CubeNums red green blue)))))
(defn min-cubes [val-186] (let [^{:unname "rounds"} var-rounds-187 (aget val-186 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-187)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_24 _anon%2_25] (+ _anon%1_24 _anon%2_25)) 0)))
