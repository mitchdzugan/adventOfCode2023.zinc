(require ' ["./lib.mjs" :as lib])
(require ' ["./../+.mjs" :as + :refer-macros true])
(do nil (def CubeNumsT 30))
(defn CubeNums [red green blue] [30 red green blue])
(do nil (def GameT 31))
(defn cubes-power [val-157] (let [^{:unname "red"} var-red-158 (aget val-157 1) ^{:unname "green"} var-green-159 (aget val-157 2) ^{:unname "blue"} var-blue-160 (aget val-157 3)] (* ^{:unname "red"} var-red-158 ^{:unname "green"} var-green-159 ^{:unname "blue"} var-blue-160)))
(defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (lib/parseInt colorValStr)] (+/put colorVals color colorVal)))
(defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_15] (addColorValFromColorStr colorVals _anon%1_15)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue")))))
(defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (lib/parseInt idValStr) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] [31 id rounds]))
(def all-cubes (CubeNums 12 13 14))
(defn valid-round? [val-161] (let [^{:unname "red"} var-red-162 (aget val-161 1) ^{:unname "green"} var-green-163 (aget val-161 2) ^{:unname "blue"} var-blue-164 (aget val-161 3)] (let [^{:unname "red"} var-red-165 (aget all-cubes 1) ^{:unname "green"} var-green-166 (aget all-cubes 2) ^{:unname "blue"} var-blue-167 (aget all-cubes 3)] (and (<= ^{:unname "red"} var-red-162 ^{:unname "red"} var-red-165) (<= ^{:unname "green"} var-green-163 ^{:unname "green"} var-green-166) (<= ^{:unname "blue"} var-blue-164 ^{:unname "blue"} var-blue-167)))))
(defn valid-game? [val-168] (let [^{:unname "rounds"} var-rounds-169 (aget val-168 2)] (+/reduce (fn [_anon%1_16 _anon%2_17] (and _anon%1_16 (valid-round? _anon%2_17))) true ^{:unname "rounds"} var-rounds-169)))
(defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_18] (not (+/is "" (.trim _anon%1_18))))) (+/fmap parse-game)))
(defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn [val-170] (let [^{:unname "id"} var-id-171 (aget val-170 1)] ^{:unname "id"} var-id-171))) (+/reduce (fn [_anon%1_19 _anon%2_20] (+ _anon%1_19 _anon%2_20)) 0)))
(defn update-min-cubes [acc val-172] (let [^{:unname "red"} var-red-173 (aget val-172 1) ^{:unname "green"} var-green-174 (aget val-172 2) ^{:unname "blue"} var-blue-175 (aget val-172 3)] (let [^{:unname "red"} var-red-176 (aget acc 1) ^{:unname "green"} var-green-177 (aget acc 2) ^{:unname "blue"} var-blue-178 (aget acc 3)] (let [red (.max js/Math ^{:unname "red"} var-red-176 ^{:unname "red"} var-red-173) green (.max js/Math ^{:unname "green"} var-green-177 ^{:unname "green"} var-green-174) blue (.max js/Math ^{:unname "blue"} var-blue-178 ^{:unname "blue"} var-blue-175)] (CubeNums red green blue)))))
(defn min-cubes [val-179] (let [^{:unname "rounds"} var-rounds-180 (aget val-179 2)] (+/reduce update-min-cubes (CubeNums 0 0 0) ^{:unname "rounds"} var-rounds-180)))
(defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_21 _anon%2_22] (+ _anon%1_21 _anon%2_22)) 0)))
