(require ' ["./../src/aoc/day1.mjs" :as day1])
(require ' ["./../src/aoc/day2.mjs" :as day2])
(require ' ["./../src/aoc/day3.mjs" :as day3])
(require ' ["./../src/aoc/day4.mjs" :as day4])
(require ' ["./../src/aoc/day5.mjs" :as day5])
(require ' ["./../src/aoc/day6.mjs" :as day6])
(require ' ["./../src/aoc/day7.mjs" :as day7])
(require ' ["./../src/aoc/day8.mjs" :as day8])
(require ' ["./../src/aoc/day9.mjs" :as day9])
(require ' ["./../src/aoc/day10.mjs" :as day10])
(require ' ["./../src/aoc/day11.mjs" :as day11])
(require ' ["./../src/aoc/day12.mjs" :as day12])
(require ' ["./../src/aoc/day13.mjs" :as day13])
(require ' ["./../src/aoc/day14.mjs" :as day14])
(require ' ["./../src/aoc/day15.mjs" :as day15])
(require ' ["./../src/aoc/lib.mjs" :as lib])
(require ' ["./../src/+.mjs" :as + :refer-macros true])
(def dayModules (+/Vec day1 day2 day3 day4 day5 day6 day7 day8 day9 day10 day11 day12 day13 day14 day15))
(def toSolve (+/Vec))
(def rp1? (aref true))
(def rp2? (aref true))
(def rgetInput (aref lib/getInput))
(defn solve [day] (let [module (+/or {} (+/at dayModules (- day 1)))] (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (+/str "🎄 advent of code day " day " 🎄")) (let [input ((aget rgetInput "r") day)] (when (aget rp1? "r") (+/log (+/str "❄ 🎄 part 1:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (.part1 module input))) (when (aget rp2? "r") (+/log (+/str "❄ 🎄 part 2:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (.part2 module input))) (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log))))
(loop [n 2 past-opts? false] (when (< n (.-length js/process.argv)) (let [push (fn [_anon%1_1] (let [v (lib/parseInt _anon%1_1)] (when (and (> v 0) (<= v (+/size dayModules))) (+/push toSolve v)))) arg (aget js/process.argv n)] (cond past-opts? (do (push arg) (recur (+ n 1) true)) (= arg "-n1") (do (a= rp1? false) (recur (+ n 1) false)) (= arg "-n2") (do (a= rp2? false) (recur (+ n 1) false)) (= arg "-i") (do (let [basename (aget js/process.argv (+ n 1)) getInput (fn [] (lib/getRawInput basename))] (a= rgetInput getInput) (recur (+ n 2) false))) :else (do (push arg) (recur (+ n 1) true))))))
(when (+/empty? toSolve) (+/for dayModules (fn [_anon%1_3 _anon%2_2] (+/push toSolve (+ 1 _anon%2_2)))))
(+/for toSolve solve)
