{:merge-state {:defreferred {"defn-memo" true}, :refer-macros nil, :name-alias nil, :placeholders nil, :get-dep-path {"+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+/types.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/+/types.zn" "+"}, :exporting {"/home/mitch/Projects/adventOfCode2023.zinc/src/+/types.zn" true}, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/+/types.zn" true}}, :res {:code [(require ' ["./types.mjs" :as + :exporting "*"]) (def- key-impls {}) (defn implement-key [type-id f] (aset key-impls type-id f)) (defn key [obj] ((aget key-impls (type-id obj)) obj)) (defn forcedKey [obj] ((or (aget key-impls (type-id obj)) inst-id) obj)) (implement-key +/NumT +/id) (implement-key +/StrT +/id) (implement-key +/BoolT +/id) (+/implement-monad-plus +/NumT (fn [] (-> 0)) (fn [_anon%1_94 _anon%2_95] (+ _anon%1_94 _anon%2_95))) (+/implement-monad-plus +/StrT (fn [] (-> "")) +/str) (+/implement-monad-plus +/BoolT (fn [] (-> false)) (fn [_anon%1_96 _anon%2_97] (clojure.core/or _anon%1_96 _anon%2_97))) (+/implement-monad-plus +/VecT (fn [] (Vec)) (fn [_anon%1_98 _anon%2_99] (concat _anon%1_98 _anon%2_99))) (+/implement-monad-plus +/MaybeT (fn [] (-> None)) (fn [_anon%1_101 _anon%2_100] (maybe _anon%2_100 Just _anon%1_101))) (+/implement-applicative +/VecT (fn [_anon%1_102] (Vec _anon%1_102))) (+/implement-applicative +/MaybeT (fn [_anon%1_103] (Just _anon%1_103))) (+/implement-flatplicative-for-applicative +/VecT) (+/implement-flatplicative-for-applicative +/MaybeT) (+/implement-flatplicative +/StrT +/str) (+/implement-flatplicative +/BoolT (fn [_anon%1_104] (+/not (+/not _anon%1_104)))) (def MapClass +/MapClass) (def Unit [+/UnitT]) (defn Vec [& a-] (let [a (clojure.core/or a- []) id (+/mk-inst-id)] {:T +/VecT, :I id, :J (+/prop$ (+/apply +/argv +/VecT (.map a json))), :P (+/prop$ (.map a pretty)), :a a})) (defn Map [pairs] (new MapClass pairs)) (defn Set [& initials-] (let [initials (clojure.core/or initials- []) d (Map) id (+/mk-inst-id)] (.forEach initials (fn [_anon%1_105] (.set d (key _anon%1_105) _anon%1_105))) {:T +/SetT, :I id, :J (+/prop$ (+/js-array-from d [+/SetT] (fn [[_ v]] (json v)))), :P (+/prop$ (pretty (vals d))), :d d})) (defn KeyMap [pairs] (let [ks (Map (.map pairs (fn [[k]] [(key k) k]))) vs (Map (.map pairs (fn [[k v]] [(key k) v]))) id (+/mk-inst-id)] {:T +/KeyMapT, :I id, :J (+/prop$ (+/js-array-from vs [+/KeyMapT] (fn [[kk v]] [(json (.get ks kk)) (json v)]))), :P (+/prop$ (pretty vs)), :ks ks, :vs vs})) (defn KeyedList [pairs] (let [id (+/mk-inst-id) kl {:I id, :P (+/prop$ (+/<<- (+/js-flat-array-from (.-a $) ["#:KeyedList"]) (fn [[id v]] [(+/str "#" id) (pretty v)]))), :J (+/prop$ (+/<<- (+/js-array-from (.-a $) [+/KeyedListT]) (fn [[id v]] [id (json v)]))), :T +/KeyedListT, :l nil, :d {}, :f nil, :i 1, :a (+/prop$ (let [res []] (loop [id (.-f $)] (if (+/nil? id) res (let [[v pid nid] (aget $ "d" id)] (.push res [id v]) (recur nid))))))} empty? (fn [_anon%1_106] (+/is 0 (+/js-length _anon%1_106)))] (doto kl (do (when-not (empty? pairs) (aset kl "f" (aget pairs 0 0)) (loop [[[nid nv :as next] & rest] pairs [cid cv :as curr] [] [pid pv :as prev] [] max-id 0] (when-not (+/nil? cid) (aset kl "d" cid [cv pid nid])) (if (not (empty? rest)) (recur rest next curr (+/max max-id nid)) (doto kl (aset "i" (inc max-id)) (aset "l" nid) (aset "d" nid [nv cid]))))))))) (defn- mkMaybe [j e] (let [id (+/mk-inst-id)] {:T +/MaybeT, :I id, :J (+/prop$ (if e [+/MaybeT +/null] [+/MaybeT (json j)])), :P (+/prop$ (if e +/null {:just (pretty j)})), :j j, :e e})) (defn Just [j] (mkMaybe j false)) (def None (mkMaybe nil true)) (defn Maybe [nilable] (mkMaybe nilable (+/nil? nilable))) (defn type-id [any] (.-T any)) (defn inst-id [any] (.-I any)) (defn json [any] (.-J any)) (defn pretty [any] (and any (.-P any))) (defn- coll-impl [spec obj] ((clojure.core/or (aget spec (type-id obj)) (aget spec +/else)))) (defn Range [& args] (let [[a1 a2 a3] args fin (fn [init end step] (+/apply Vec (js/Array.from (js/Array (+/ceil (+/div (- end init) step))) (fn [_anon%1_108 _anon%2_107] (+ init (* step _anon%2_107))))))] (cond (+/nil? a1) (Vec) (+/nil? a2) (fin 0 a1 (if (>= a1 0) 1 -1)) (+/nil? a3) (fin a1 a2 (if (>= a2 a1) 1 -1)) :else (fin a1 a2 a3)))) (defn at (defn-impl$ [$ k] ([+/VecT] (Maybe (aget $ "a" k))) ([+/MapT] (Maybe (.get $ k))) ([+/SetT] (fmap (fn [] Unit) (Maybe (.get (.-d $) (key k))))) ([+/KeyMapT] (Maybe ((.. $ -vs -get) (key k)))) ([+/KeyedListT] (fmap (fn [_anon%1_109] (aget _anon%1_109 0)) (Maybe (aget $ "d" k)))) ([+/MaybeT] (if (or (not= 0 k) (.-e $)) None $)))) (defn has? [c k] (not (empty? (at c k)))) (defn intersection [s1 s2] (+/apply Set (.-a (filter (fn [_anon%1_110] (has? s2 _anon%1_110)) (vals s1))))) (defn union [s1 s2] (+/apply Set (.-a (concat (vals s1) (vals s2))))) (defn every? [p c] (reduce (fn [_anon%1_111 _anon%2_112 _anon%3_113 _anon%4_114] (and _anon%1_111 (p _anon%2_112 _anon%3_113 _anon%4_114))) true c)) (defn any? [p c] (not (every? (fn [& args] (not (+/apply p args))) c))) (defn put (defn-impl$ [$ k v] ([+/VecT] (aset $ "a" k v)) ([+/MapT] (.set $ k v)) ([+/KeyMapT] (let [kk (key k)] (.set (.-ks $) kk k) (.set (.-vs $) kk v))) ([+/KeyedListT] "TODO"))) (defn for-each-map [f m get-js-m map-key] (.forEach (+/js-array-from (get-js-m m) (fn [[k v]] (fn [] (f v (map-key k) m)))) (fn [_anon%1_115] (_anon%1_115)))) (defn each (defn-impl$ [f $] ([+/SetT] (each f (vals $))) ([+/VecT] ((.. $ -a -forEach) (fn [_anon%1_116 _anon%2_117] (f _anon%1_116 _anon%2_117 $)))) ([+/MapT] (for-each-map f $ +/id +/id)) ([+/KeyMapT] (for-each-map f $ (fn [_anon%1_118] (.-vs _anon%1_118)) (fn [_anon%1_119] ((.. $ -ks -get) _anon%1_119)))) ([+/MaybeT] (when-not (.-e $) (f (.-j $) 0 $))) ([+/KeyedListT] ((.. $ -a forEach (fn [[id v] ind] (f v id $ ind))))))) (defn for [c f] (each f c)) (defn reduce [f init coll] (let [res [init]] (each (fn [_anon%1_120 _anon%2_121 _anon%3_122 _anon%4_123] (aset res 0 (f (aget res 0) _anon%1_120 _anon%2_121 _anon%3_122 _anon%4_123))) coll) (aget res 0))) (defn fmap (defn-impl$ [f $] ([+/VecT] (+/apply Vec ((.. $ -a -map) (fn [_anon%1_124 _anon%2_125] (f _anon%1_124 _anon%2_125 $))))) ([+/MapT] (Map (+/js-array-from $ (fn [[k v]] [k (f v k $)])))) ([+/MaybeT] (if (.-e $) $ (Just (f (.-j $) 0 $)))))) (defn bind (defn-impl$ [f $] ([+/VecT] (+/apply Vec ((.. $ -a -flatMap) (fn [_anon%1_126 _anon%2_127] (.-a (f _anon%1_126 _anon%2_127 $)))))) ([+/MaybeT] (if (.-e $) $ (f (.-j $) 0 $))))) (defn concat [...args] (bind +/id (+/apply Vec args))) (defn filter (defn-impl$ [p $] ([+/VecT] (+/apply Vec ((.. $ -a -filter) (fn [_anon%1_128 _anon%2_129] (p _anon%1_128 _anon%2_129 $))))) ([+/MaybeT] (if (clojure.core/or (.-e $) (p (.-j $) 0 $)) $ None)))) (defn remove [p coll] (filter (fn [_anon%1_130 _anon%2_131 _anon%3_132] (+/not (p _anon%1_130 _anon%2_131 _anon%3_132))) coll)) (defn keys (defn-impl$ [$] ([+/VecT] (Range (+/js-length (.-a $)))) ([+/MapT] (+/apply Vec (+/js-array-from $ (fn [_anon%1_133] (aget _anon%1_133 0))))) ([+/SetT] (vals (.-d $))) ([+/KeyMapT] (vals (.-ks $))) ([+/MaybeT] (if (.-e $) (Vec) (Vec 0))))) (defn vals (defn-impl$ [$] ([+/VecT] (+/apply Vec (.-a $))) ([+/MapT] (+/apply Vec (+/js-array-from $ (fn [_anon%1_134] (aget _anon%1_134 1))))) ([+/SetT] (vals (.-d $))) ([+/KeyMapT] (vals (.-vs $))) ([+/MaybeT] (if (.-e $) (Vec) (Vec (.-j $)))))) (defn size (defn-impl$ [$] ([+/VecT] (+/js-length (.-a $))) ([+/MapT] (.. $ -size)) ([+/SetT] (size (vals (.-d $)))) ([+/KeyMapT] (size (.-ks $))) ([+/MaybeT] (if (.-e $) 0 1)))) (defn or- (defn-impl$ [mk-default-val $] ([+/MaybeT] (if (.-e $) (mk-default-val) (.-j $))))) (defn or [default-val m] (or- (fn [] default-val) m)) (defn unwrap! [m] (or- (fn [] (throw "unwrap forced on 'None' type")) m)) (defn at! [c id] (unwrap! (at c id))) (def last! (fn [_anon%1_135] (at! _anon%1_135 (- (size _anon%1_135) 1)))) (def first! (fn [_anon%1_136] (at! _anon%1_136 0))) (defn maybe- (defn-impl$ [on-none on-just $] ([+/MaybeT] (if (.-e $) (on-none) (on-just (.-j $)))))) (defn maybe [none on-just m] (maybe- (fn [] none) on-just m)) (defn reverse [v] (let [res (Vec)] (loop [i (- (size v) 1)] (if (< i 0) res (do (push res (at! v i)) (recur (- i 1))))))) (defn insert (defn-impl$ [$ target-id v] ([+/VecT] (if (>= target-id (size $)) None (do (.splice $ target-id 0 v) (Just target-id)))) ([+/MapT] (fmap (fn [] (do (put $ target-id v) target-id)) (at $ target-id))) ([+/KeyMapT] (let [kk (key target-id)] (fmap (fn [] (do (put (.-ks $) kk v) (put (.-vs $) kk v) kk)) (at (.-ks $) kk)))) ([+/KeyedListT] (let [id (aget $ "i") prepend (aget $ "d" target-id)] (if (nil? prepend) None (let [[pid] (aget prepend 1)] (doto $ (amod "n" inc) ((if (+/nil? pid) (fn [_anon%1_137] (aset _anon%1_137 "f" pid)) (fn [_anon%1_138] (aset _anon%1_138 "d" pid 2 id)))) (aset _anon%1_139 "d" target-id 1 id) (aset _anon%1_139 "d" id [v pid target-id])) (Just id))))))) (defn push (defn-impl$ [$ v] ([+/VecT] (.push (.-a $) v)) ([+/SetT] (.set (.-d $) (key v) v)) ([+/KeyedListT] "TODO"))) (defn unshift (defn-impl$ [$ v] ([+/VecT] (.unshift (.-a $) v)) ([+/SetT] (.set (.-d $) (key v) v)) ([+/KeyedListT] (insert $ (.-f $) v)))) (defn sort-by (defn-impl$ [f $] ([+/VecT] (let [res (+/apply Vec (.-a $))] (.sort (.-a res) (fn [_anon%1_140 _anon%2_141] (- (f _anon%1_140) (f _anon%2_141)))) res)))) (defn sort [c] (sort-by +/id c)) (defn keyBy [f c] (let [res (Map)] (each (fn [_anon%1_142] (put res (f _anon%1_142) _anon%1_142)) c) res)) (defn groupBy [f c] (let [res (Map)] (each (fn [_anon%1_143] (let [k (f _anon%1_143) curr (or- Vec (at res k))] (push curr _anon%1_143) (put res k curr))) c) res)) (defn empty? [c] (+/is 0 (size c))) (defn unjson [v] (let [unjson-pairs (fn [[k v]] [(unjson k) (unjson v)])] (cond (+/js-array? v) ((-> {[+/MaybeT] (fn [] (fmap unjson (Maybe (aget v 1)))), [+/VecT] (fn [] (fmap unjson (+/apply Vec (.slice v 1)))), [+/MapT] (fn [] (Map (.map unjson-pairs (.slice v 1)))), [+/KeyMapT] (fn [] (KeyMap (.map unjson-pairs (.slice v 1))))} (aget (type-id v)) (or (fn [] (.map v unjson))))) (aget {[+/StrT] true, [+/NumT] true, [+/BoolT] true} (and v (type-id v))) v :else (throw (+/str "Val: /" v "/ is of unsupported type"))))) (defn encode [v] (js/JSON.stringify (json v))) (defn decode [s] (unjson (js/JSON.parse s)))], :preprocessing [{:type :tokenize/collection, :brace "(", :export? true, :defname "defn-impl$", :macro? "defmacro", :intent "defmacro", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :content "preprocess"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 124, :col-start 1, :content "defmacro"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 124, :col-start 10, :content "defn-impl$"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 124, :col-start 22, :content "arg-spec-placeholder"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 124, :col-start 43, :content "&"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 124, :col-start 45, :content "cases"}, :mod nil, :md nil}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 124, :col-start 21, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 124, :col-start 50, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 125, :col-start 3, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 125, :col-start 8, :content "valsym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 125, :col-start 16, :content "gensym"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 125, :col-start 11, :content "val"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 125, :col-start 15, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 125, :col-start 0, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 126, :col-start 8, :content "arg-spec"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 126, :col-start 18, :content "->>"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 126, :col-start 22, :content "arg-spec-placeholder"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 127, :col-start 23, :content "mapv"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 127, :col-start 29, :content "fn"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 127, :col-start 33, :content "form"}, :mod nil, :md nil}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 127, :col-start 32, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 127, :col-start 37, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 31, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 36, :content "placeholder?"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 50, :content "and"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 55, :content "symbol?"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 63, :content "form"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 54, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 128, :col-start 67, :content ")"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 70, :content "="}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 128, :col-start 12, :content "$"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 2, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 128, :col-start 7, :content "form"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 1, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 128, :col-start 11, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 69, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 128, :col-start 12, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 49, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 128, :col-start 13, :content ")"}}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 35, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 128, :col-start 14, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 129, :col-start 33, :content "if"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 129, :col-start 36, :content "placeholder?"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 129, :col-start 49, :content "valsym"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 129, :col-start 56, :content "form"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 129, :col-start 32, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 129, :col-start 60, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 128, :col-start 30, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 129, :col-start 61, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 127, :col-start 28, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 129, :col-start 62, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 127, :col-start 22, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 129, :col-start 63, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 126, :col-start 17, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 129, :col-start 64, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 130, :col-start 8, :content "spec"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 130, :col-start 14, :content "->>"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 130, :col-start 18, :content "cases"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 19, :content "reduce"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "#", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 28, :content "assoc"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 34, :content "%1"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 38, :content "first"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 44, :content "%2"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 131, :col-start 37, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 46, :content ")"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "`", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 50, :content "fn"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 131, :col-start 53, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 54, :content "]"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 56, :content ""}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "~@", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 59, :content "drop"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/number, :row-start 131, :col-start 64, :content "1", :number 1}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 131, :col-start 66, :content "%2"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "~@", :type :tokenize/collection-open, :row-start 131, :col-start 57, :content "@("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 68, :content ")"}}], :open-token {:brace "(", :mod "`", :type :tokenize/collection-open, :row-start 131, :col-start 48, :content "`("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 69, :content ")"}}], :open-token {:brace "(", :mod "#", :type :tokenize/collection-open, :row-start 131, :col-start 26, :content "#("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 70, :content ")"}} {:md nil, :type :tokenize/collection, :brace "{", :mod "", :children [], :open-token {:brace "{", :mod "", :type :tokenize/collection-open, :row-start 131, :col-start 72, :content "{"}, :close-token {:brace "{", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 73, :content "}"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 131, :col-start 18, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 74, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 130, :col-start 13, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 75, :content ")"}}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 125, :col-start 7, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 131, :col-start 76, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "`", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 6, :content "arg-spec"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 17, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 22, :content "$"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 24, :content "valsym"}, :mod "~", :md nil}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 132, :col-start 21, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 132, :col-start 31, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 34, :content "coll-impl"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 44, :content "spec"}, :mod "~", :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 132, :col-start 50, :content "$"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 132, :col-start 33, :content "("}, :close-token {:brace "(", :mod "$", :type :tokenize/collection-close, :row-start 132, :col-start 51, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 132, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 132, :col-start 52, :content ")"}}], :open-token {:brace "(", :mod "`", :type :tokenize/collection-open, :row-start 132, :col-start 4, :content "`("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 132, :col-start 53, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 125, :col-start 2, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 132, :col-start 54, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 124, :col-start 0, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 132, :col-start 55, :content ")"}}]} {:type :tokenize/collection, :brace "(", :export? true, :defname "defn-memo", :macro? "defmacro", :intent "defmacro", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :content "preprocess"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 334, :col-start 1, :content "defmacro"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 334, :col-start 10, :content "defn-memo"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 334, :col-start 21, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 334, :col-start 26, :content "&"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 334, :col-start 28, :content "rest"}, :mod nil, :md nil}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 334, :col-start 20, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 334, :col-start 32, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 335, :col-start 3, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 335, :col-start 8, :content "rtrnsym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 335, :col-start 17, :content "gensym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 335, :col-start 25, :content "str"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 335, :col-start 29, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 335, :col-start 28, :content "-rtrn"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 335, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 335, :col-start 0, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 335, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 335, :col-start 1, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 336, :col-start 8, :content "mkeysym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 336, :col-start 17, :content "gensym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 336, :col-start 25, :content "str"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 336, :col-start 29, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 336, :col-start 29, :content "-mkey"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 336, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 336, :col-start 0, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 336, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 336, :col-start 1, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 337, :col-start 8, :content "implsym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 337, :col-start 17, :content "gensym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 337, :col-start 25, :content "str"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 337, :col-start 29, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 337, :col-start 30, :content "-impl"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 337, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 337, :col-start 0, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 337, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 337, :col-start 1, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 338, :col-start 8, :content "argssym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 338, :col-start 17, :content "gensym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 338, :col-start 25, :content "str"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 338, :col-start 29, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 338, :col-start 31, :content "-args"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 338, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 338, :col-start 0, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 338, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 338, :col-start 1, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 339, :col-start 8, :content "memosym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 339, :col-start 17, :content "gensym"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 339, :col-start 25, :content "str"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 339, :col-start 29, :content "name"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/string, :row-start 339, :col-start 32, :content "-memo"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 339, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 339, :col-start 0, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 339, :col-start 16, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 339, :col-start 1, :content ")"}}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 335, :col-start 7, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 339, :col-start 2, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "`", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 340, :col-start 6, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 340, :col-start 11, :content "implsym"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 340, :col-start 21, :content "fn"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 340, :col-start 24, :content "rest"}, :mod "~@", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 340, :col-start 20, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 340, :col-start 30, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 341, :col-start 11, :content "memosym"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 341, :col-start 21, :content "Map"}, :mod nil, :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 341, :col-start 20, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 341, :col-start 24, :content ")"}}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 340, :col-start 10, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 341, :col-start 25, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 342, :col-start 8, :content "defn"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 342, :col-start 13, :content "name"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 342, :col-start 20, :content "&"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 342, :col-start 22, :content "argssym"}, :mod "~", :md nil}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 342, :col-start 19, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 342, :col-start 30, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 10, :content "let"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 15, :content "mkeysym"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 25, :content "encode"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 33, :content "fmap"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 38, :content "+/forcedKey"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 51, :content "+/apply"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 59, :content "+/Vec"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 343, :col-start 65, :content "argssym"}, :mod "~", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 343, :col-start 50, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 343, :col-start 73, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 343, :col-start 32, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 343, :col-start 74, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 343, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 343, :col-start 75, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 15, :content "rtrnsym"}, :mod "~", :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 25, :content "or-"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 30, :content "fn"}, :mod nil, :md nil} {:md nil, :type :tokenize/collection, :brace "[", :mod "", :children [], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 344, :col-start 33, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 344, :col-start 34, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 37, :content "+/apply"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 45, :content "implsym"}, :mod "~", :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 344, :col-start 54, :content "argssym"}, :mod "~", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 344, :col-start 36, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 344, :col-start 62, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 344, :col-start 29, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 344, :col-start 63, :content ")"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 345, :col-start 30, :content "at"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 345, :col-start 33, :content "memosym"}, :mod "~", :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 345, :col-start 42, :content "mkeysym"}, :mod "~", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 345, :col-start 29, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 345, :col-start 50, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 344, :col-start 24, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 345, :col-start 51, :content ")"}}], :open-token {:brace "[", :mod "", :type :tokenize/collection-open, :row-start 343, :col-start 14, :content "["}, :close-token {:brace "[", :mod "", :type :tokenize/collection-close, :row-start 345, :col-start 52, :content "]"}} {:md nil, :type :tokenize/collection, :brace "(", :mod "", :children [{:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 346, :col-start 12, :content "put"}, :mod nil, :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 346, :col-start 16, :content "memosym"}, :mod "~", :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 346, :col-start 25, :content "mkeysym"}, :mod "~", :md nil} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 346, :col-start 34, :content "rtrnsym"}, :mod "~", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 346, :col-start 11, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 346, :col-start 42, :content ")"}} {:type :tokenize/leaf, :token {:type :tokenize/identifier, :row-start 347, :col-start 11, :content "rtrnsym"}, :mod "~", :md nil}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 343, :col-start 9, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 347, :col-start 19, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 342, :col-start 7, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 347, :col-start 20, :content ")"}}], :open-token {:brace "(", :mod "`", :type :tokenize/collection-open, :row-start 340, :col-start 4, :content "`("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 347, :col-start 21, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 335, :col-start 2, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 347, :col-start 22, :content ")"}}], :open-token {:brace "(", :mod "", :type :tokenize/collection-open, :row-start 334, :col-start 0, :content "("}, :close-token {:brace "(", :mod "", :type :tokenize/collection-close, :row-start 347, :col-start 23, :content ")"}}]}]}}