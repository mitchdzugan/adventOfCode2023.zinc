{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"path" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/path", "fs" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/fs$default", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/path" "path", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/fs$default" "fs", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["path" :as path]) (require ' ["fs$default" :as fs]) (require ' ["./../+.mjs" :as + :refer-macros true]) (def* SolutionT [part1 part2]) (defn-mk (Solution [part1 part2] SolutionT) (%= [part1 part2])) (defn-un part1 [SolutionT] %part1) (defn-un part2 [SolutionT] %part2) (defn strsplit [src split] (+/apply +/Vec (.split src split))) (defn getInput [n] (let [basename (+/str "day" n) filename (path/join js/__dirname ".." "resources" "input" basename)] (fs/readFileSync filename "utf8")))], :preprocessing nil}}