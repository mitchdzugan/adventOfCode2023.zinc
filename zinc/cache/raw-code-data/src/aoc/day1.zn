{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["./lib.mjs" :as lib]) (require ' ["./../+.mjs" :as + :refer-macros true]) (def IGNORE_LEADING_0 false) (def digitStrs (+/Map [["one" 1] ["two" 2] ["three" 3] ["four" 4] ["five" 5] ["six" 6] ["seven" 7] ["eight" 8] ["nine" 9]])) (def digitStrLengths ((fn [] (let [seenLengths (+/Map)] (+/each (fn [_anon%1_46 _anon%2_45] (+/put seenLengths (.-length _anon%2_45) true)) digitStrs) (+/sort (+/keys seenLengths)))))) (defn getDigit [src index useDigitStrs exclude0] (let [digit (lib/parseInt (.substr src index 1))] (if (and (< digit 10) (>= digit (if exclude0 1 0))) (+/Just digit) (loop [result +/None strLenIndex 0] (if (or (not useDigitStrs) (not (+/empty? result)) (> strLenIndex (+/size digitStrLengths))) result (let [strLen (+/or 0 (+/at digitStrLengths strLenIndex)) substr (.substr src index strLen)] (recur (+/at digitStrs substr) (+ strLenIndex 1)))))))) (def+ OriginT (Front) (Back)) (def Front (mk (Front of OriginT))) (def Back (mk (Back of OriginT))) (defn firstDigit [src origin useDigitStrs] (let [start (impl [OriginT origin] (Front 0) (Back (- (.-length src) 1))) delta (impl [OriginT origin] (Front 1) (Back -1)) exclude0 (impl [OriginT origin] (Front IGNORE_LEADING_0) (Back false))] (loop [result +/None index start] (if (or (not (+/empty? result)) (>= index (.-length src)) (< index 0)) result (recur (getDigit src index useDigitStrs exclude0) (+ index delta)))))) (defn getCalibrationValue [src useDigitStrs] (<<- ((fn [_anon%1_48 _anon%2_47] (+/bind _anon%2_47 _anon%1_48)) (firstDigit src Front useDigitStrs)) (fn [dTens]) ((fn [_anon%1_50 _anon%2_49] (+/bind _anon%2_49 _anon%1_50)) (firstDigit src Back useDigitStrs)) (fn [dOnes]) (+/Just (+ (* 10 dTens) dOnes)))) (defn getCalibrationSum [input useDigitStrs] (->> (lib/strsplit input "\n") (+/fmap (fn [_anon%1_51] (getCalibrationValue _anon%1_51 useDigitStrs))) (+/reduce (fn [_anon%1_52 _anon%2_53] (+ _anon%1_52 (+/or 0 _anon%2_53))) 0))) (defn part1 [input] (getCalibrationSum input false)) (defn part2 [input] (getCalibrationSum input true))], :preprocessing nil}}