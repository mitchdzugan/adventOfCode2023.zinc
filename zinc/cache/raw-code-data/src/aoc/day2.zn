{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["./lib.mjs" :as lib]) (require ' ["./../+.mjs" :as + :refer-macros true]) (def* CubeNumsT [[red :type +/NumT] [green :type +/NumT] [blue :type +/NumT]]) (defn-mk (CubeNums [red green blue] CubeNumsT) (%= [red green blue])) (def* GameT [id [rounds :type [+/VecT CubeNumsT]]]) (defn-un cubes-power [CubeNumsT] (* %red %green %blue)) (defn addColorValFromColorStr [colorVals _colorStr] (let [colorStr (.trim _colorStr) [colorValStr color] (.split colorStr " ") colorVal (js/parseInt colorValStr 10)] (+/put colorVals color colorVal))) (defn parse-round [_roundStr] (let [roundStr (.trim _roundStr) colorVals (+/Map) colorStrs (lib/strsplit roundStr ",")] (+/each (fn [_anon%1_43] (addColorValFromColorStr colorVals _anon%1_43)) colorStrs) (CubeNums (+/or 0 (+/at colorVals "red")) (+/or 0 (+/at colorVals "green")) (+/or 0 (+/at colorVals "blue"))))) (defn parse-game [line] (let [[idStr roundsStr] (.split line ":") [_game_ idValStr] (.split idStr " ") id (js/parseInt idValStr 10) roundStrs (lib/strsplit roundsStr ";") rounds (+/fmap parse-round roundStrs)] (mk GameT (%= [id rounds])))) (def all-cubes (CubeNums 12 13 14)) (defn-un valid-round? [CubeNumsT] (un [CubeNumsT all-cubes :prefix {:type :ns, :s "all"}] (and (<= %red %all/red) (<= %green %all/green) (<= %blue %all/blue)))) (defn-un valid-game? [GameT] (+/reduce (fn [_anon%1_44 _anon%2_45] (and _anon%1_44 (valid-round? _anon%2_45))) true %rounds)) (defn to-games [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_46] (not (+/is "" (.trim _anon%1_46))))) (+/fmap parse-game))) (defn part1 [input] (->> (to-games input) (+/filter valid-game?) (+/fmap (fn-un [GameT] %id)) (+/reduce (fn [_anon%1_47 _anon%2_48] (+ _anon%1_47 _anon%2_48)) 0))) (defn-un update-min-cubes [acc CubeNumsT] (un [CubeNumsT acc :prefix {:type :ns, :s "acc"}] (let [red (.max js/Math %acc/red %red) green (.max js/Math %acc/green %green) blue (.max js/Math %acc/blue %blue)] (CubeNums red green blue)))) (defn-un min-cubes [GameT] (+/reduce update-min-cubes (CubeNums 0 0 0) %rounds)) (defn part2 [input] (->> (to-games input) (+/fmap min-cubes) (+/fmap cubes-power) (+/reduce (fn [_anon%1_49 _anon%2_50] (+ _anon%1_49 _anon%2_50)) 0)))], :preprocessing nil}}