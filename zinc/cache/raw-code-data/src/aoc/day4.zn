{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["./lib.mjs" :as lib]) (require ' ["./../+.mjs" :as + :refer-macros true]) (def* CardT [id [winning :type [+/SetT +/NumT]] [my :type [+/SetT +/NumT]]]) (defn-un cardId [CardT] %id) (defn parseCard [line] (let [[idLabelStr numDataStr] (.split line ":") [_cardStr idStr] (.split (.trim idLabelStr) lib/rx_whitespace) id (lib/parseInt idStr) [winningNumStr myNumStr] (.split (.trim numDataStr) "|") toSet (fn [numStr] (as-> numStr $ (.split (.trim $) lib/rx_whitespace) (.map $ lib/parseInt) (+/apply +/Set $))) winning (toSet winningNumStr) my (toSet myNumStr)] (mk CardT (%= [id winning my])))) (defn-un myWinCount [CardT] (+/size (+/intersection %winning %my))) (defn cardValue [card] (->> (myWinCount card) (+ -1) (js/Math.pow 2) js/Math.floor)) (defn parseCards [input] (->> (lib/strsplit input "\n") (+/filter (fn [_anon%1_100] (not (+/is "" (.trim _anon%1_100))))) (+/fmap parseCard))) (defn part1 [input] (->> (parseCards input) (+/fmap cardValue) (+/reduce (fn [_anon%1_101 _anon%2_102] (+ _anon%1_101 _anon%2_102)) 0))) (defn scratchCardsWonByCard [card cardsById] (->> (+/Range (myWinCount card)) (+/fmap (fn [_anon%1_103] (scratchCardsWonById (+ (cardId card) 1 _anon%1_103) cardsById))) (+/reduce (fn [_anon%1_104 _anon%2_105] (+ _anon%1_104 _anon%2_105)) 1))) (defn-memo scratchCardsWonById [id cardsById] (->> (+/at cardsById id) (+/fmap (fn [_anon%1_106] (scratchCardsWonByCard _anon%1_106 cardsById))) (+/or 0))) (defn part2 [input] (let [cards (parseCards input) cardsById (+/keyBy cardId cards)] (->> (+/keys cardsById) (+/fmap (fn [_anon%1_107] (scratchCardsWonById _anon%1_107 cardsById))) (+/reduce (fn [_anon%1_108 _anon%2_109] (+ _anon%1_108 _anon%2_109)) 0))))], :preprocessing nil}}