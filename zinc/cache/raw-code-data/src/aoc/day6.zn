{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["./lib.mjs" :as lib]) (require ' ["./../+.mjs" :as + :refer-macros true]) (def* RaceT [time record]) (defn Race [time record] (mk RaceT (%= [time record]))) (defn-un count-possibilities [RaceT] (let [qdrtc_root (/ (js/Math.sqrt (- (* %time %time) (* 4 %record))) 2) qdrtc_b_2a (/ %time 2) bound_h (+/floor (+ qdrtc_b_2a qdrtc_root)) bound_l (+/floor (- qdrtc_b_2a qdrtc_root))] (- bound_h bound_l))) (defn part1 [] (->> (+/Vec (Race 52 426) (Race 94 1374) (Race 75 1279) (Race 94 1216)) (+/fmap count-possibilities) (+/reduce (fn [_anon%1_26 _anon%2_27] (* _anon%1_26 _anon%2_27)) 1))) (defn part2 [] (let [time 52947594 record 426137412791216] (count-possibilities (Race time record))))], :preprocessing nil}}