{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"day2" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn", "day4" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day4.zn", "day7" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day7.zn", "day9" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day9.zn", "day5" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day5.zn", "day6" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day6.zn", "day3" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day3.zn", "lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "day10" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day10.zn", "day12" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day12.zn", "day8" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day8.zn", "day11" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day11.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn", "day1" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day4.zn" "day4", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day5.zn" "day5", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day12.zn" "day12", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day8.zn" "day8", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn" "day1", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day3.zn" "day3", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day10.zn" "day10", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day11.zn" "day11", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day7.zn" "day7", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day9.zn" "day9", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day6.zn" "day6", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn" "day2"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day4.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day5.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day12.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day8.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day3.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day10.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day11.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day7.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day9.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day6.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn" true}}, :res {:code [(require ' ["./../src/aoc/day1.mjs" :as day1]) (require ' ["./../src/aoc/day2.mjs" :as day2]) (require ' ["./../src/aoc/day3.mjs" :as day3]) (require ' ["./../src/aoc/day4.mjs" :as day4]) (require ' ["./../src/aoc/day5.mjs" :as day5]) (require ' ["./../src/aoc/day6.mjs" :as day6]) (require ' ["./../src/aoc/day7.mjs" :as day7]) (require ' ["./../src/aoc/day8.mjs" :as day8]) (require ' ["./../src/aoc/day9.mjs" :as day9]) (require ' ["./../src/aoc/day10.mjs" :as day10]) (require ' ["./../src/aoc/day11.mjs" :as day11]) (require ' ["./../src/aoc/day12.mjs" :as day12]) (require ' ["./../src/aoc/lib.mjs" :as lib]) (require ' ["./../src/+.mjs" :as + :refer-macros true]) (def dayModules (+/Vec day1 day2 day3 day4 day5 day6 day7 day8 day9 day10 day11 day12)) (def toSolve (+/Vec)) (def rp1? (aref true)) (def rp2? (aref true)) (def rgetInput (aref lib/getInput)) (defn solve [day] (let [module (+/or {} (+/at dayModules (- day 1)))] (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (+/str "🎄 advent of code day " day " 🎄")) (let [input ((aget rgetInput "r") day)] (when (aget rp1? "r") (+/log (+/str "❄ 🎄 part 1:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (.part1 module input))) (when (aget rp2? "r") (+/log (+/str "❄ 🎄 part 2:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (.part2 module input))) (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log)))) (loop [n 2 past-opts? false] (when (< n (.-length js/process.argv)) (let [push (fn [_anon%1_1] (let [v (lib/parseInt _anon%1_1)] (when (and (> v 0) (<= v (+/size dayModules))) (+/push toSolve v)))) arg (aget js/process.argv n)] (cond past-opts? (do (push arg) (recur (+ n 1) true)) (= arg "-n1") (do (a= rp1? false) (recur (+ n 1) false)) (= arg "-n2") (do (a= rp2? false) (recur (+ n 1) false)) (= arg "-i") (do (let [basename (aget js/process.argv (+ n 1)) getInput (fn [] (lib/getRawInput basename))] (a= rgetInput getInput) (recur (+ n 2) false))) :else (do (push arg) (recur (+ n 1) true)))))) (when (+/empty? toSolve) (+/for dayModules (fn [_anon%1_3 _anon%2_2] (+/push toSolve (+ 1 _anon%2_2))))) (+/for toSolve solve)], :preprocessing nil}}