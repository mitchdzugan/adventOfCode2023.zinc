{:merge-state {:defreferred nil, :refer-macros {"/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :name-alias nil, :placeholders nil, :get-dep-path {"day1" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn", "day2" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn", "lib" "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn", "+" "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn"}, :get-as-alias {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn" "day1", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn" "day2", "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" "lib", "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" "+"}, :exporting nil, :runtime-deps {"/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day1.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/day2.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/aoc/lib.zn" true, "/home/mitch/Projects/adventOfCode2023.zinc/src/+.zn" true}}, :res {:code [(require ' ["./../src/aoc/day1.mjs" :as day1]) (require ' ["./../src/aoc/day2.mjs" :as day2]) (require ' ["./../src/aoc/lib.mjs" :as lib]) (require ' ["./../src/+.mjs" :as + :refer-macros true]) (def dayModules (+/Vec day1 day2)) (defn solve [day] (let [module (+/or {} (+/at dayModules (- day 1)))] (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (+/str "🎄 advent of code day " day " 🎄")) (let [solution (.solve module)] (+/log (+/str "❄ 🎄 part 1:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (lib/part1 solution)) (+/log (+/str "❄ 🎄 part 2:🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log (lib/part2 solution)) (+/log (+/str "❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ 🎄 ❄ ")) (+/log)))) (let [toSolve (js/parseInt (+/dig js/process ["argv" 2]) 10)] (if (and (> toSolve 0) (<= toSolve (+/size dayModules))) (solve toSolve) (+/each (fn [_ index] (solve (+ index 1))) dayModules)))], :preprocessing nil}}